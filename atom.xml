<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>/Users/hidarioosakai/OneDrive/Documents/Root-Blog/output</id>
    <title>咚咚宇宙</title>
    <updated>2019-06-27T03:28:18.160Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="/Users/hidarioosakai/OneDrive/Documents/Root-Blog/output"/>
    <link rel="self" href="/Users/hidarioosakai/OneDrive/Documents/Root-Blog/output/atom.xml"/>
    <logo>/Users/hidarioosakai/OneDrive/Documents/Root-Blog/output/images/avatar.png</logo>
    <icon>/Users/hidarioosakai/OneDrive/Documents/Root-Blog/output/favicon.ico</icon>
    <rights>All rights reserved 2019, 咚咚宇宙</rights>
    <entry>
        <title type="html"><![CDATA[Git]]></title>
        <id>/Users/hidarioosakai/OneDrive/Documents/Root-Blog/output/post/git/index.html</id>
        <link href="/Users/hidarioosakai/OneDrive/Documents/Root-Blog/output/post/git/index.html">
        </link>
        <updated>2019-05-16T06:25:33.000Z</updated>
        <summary type="html"><![CDATA[<p>Git 的学习</p>
]]></summary>
        <content type="html"><![CDATA[<p>Git 的学习</p>
<!-- more -->
<h1 id="1-git">1. git</h1>
<h2 id="11-学习目标">1.1. 学习目标</h2>
<ul>
<li>理解
<ul>
<li>常用bash系统命令</li>
<li>git 的概念</li>
<li>git 和 svn 的区别</li>
<li>git 的工作流程</li>
<li>git 管理文件版本</li>
<li>使用远程仓库</li>
<li>分支管理</li>
<li>冲突</li>
</ul>
</li>
<li>应用</li>
</ul>
<h2 id="12-认识命令行-了解">1.2. 认识命令行 了解</h2>
<h3 id="121-shell">1.2.1. shell</h3>
<p>​	<strong>Shell</strong> 俗称壳（用来区别于核），是指“提供使用者使用界面”的软件（命令解析器）</p>
<p>如</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g335fy4k7uj30wu073ab1.jpg" alt="1525664062775"></p>
<p>​	cmd shell 是系统提供的最基本的shell，功能也相对基础。</p>
<p>​	powser shell 和 git bash shell 可以理解是对 cmd shell 的一层封装，提供了更为强大的命令。</p>
<p>​	我们平常在系统上所进行的操作，如新增文件，编辑文件，删除文件等。其实底层都是通过一系列的命令来执行的。</p>
<h3 id="122-常见bash命令">1.2.2. 常见bash命令</h3>
<pre><code class="language-bash">pwd (Print Working Directory) 查看当前目录

cd (Change Directory) 切换目录，如 cd /etc

ls (List) 查看当前目录下内容，如 ls 

mkdir (Make Directory) 创建目录，如 mkdir blog

touch 创建文件，如 touch index.html

cat 查看文件全部内容，如 catindex.html

rm (remove) 删除文件，如 rm index.html、rm -rf  blog

rmdir (Remove Directory) 删除文件夹，只能删除空文件夹，不常用

mv (move) 移动文件或重命名，如 mv index.html ./demo/index.html

cp (copy) 复制文件，cp index.html ./demo/index.html

head 查看文件前几行，如 head -5 index.html

history 查看操作历史

whoami 查看当前用户
</code></pre>
<p>【注意】，在命令行当中 使用快捷键 进行复制粘贴都是没有效果的。</p>
<ul>
<li>ctrl + p 没有效果</li>
<li>ctrl + c  强制退出到 命令行当中</li>
</ul>
<h3 id="123-vi编辑器">1.2.3. vi编辑器</h3>
<ul>
<li>vi编辑器是Linux和Unix上最基本的文本编辑器。由于不需要图形界面，vi是效率很高的文本编辑器</li>
<li>vi编辑器提供了3种模式，分别是命令模式、插入模式、末行模式 每种模式有不同的功能</li>
</ul>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g334qrrowpj30jw0cpgly.jpg" alt="1525665671693"></p>
<pre><code class="language-bash">a) 打开/创建文件， vi 文件路径
b) 末行模式 :w保存，:w filenme另存为
c) 末行模式 :q退出
d) 末行模式 :wq保存并退出
e) 末行模式 :e! 撤销更改，返回到上一次保存的状态
f) 末行模式 :q! 不保存强制退出

================================================================

h) 命令模式 ZZ（大写）保存并退出
i) 命令模式 u辙销操作，可多次使用
j) 命令模式 dd删除当前行
k) 命令模式 yy复制当前行
l) 命令模式 p 粘贴内容
o) 命令模式 i进入编辑模式，当前光标处插入
p) 命令模式 a进入编辑模式，当前光标后插入
q) 命令模式 A进入编辑模式，光标移动到行尾
r) 命令模式 o进入编辑模式，当前行下面插入新行
s) 命令模式 O进入编辑模式，当前行上面插入新行
</code></pre>
<h2 id="13-git概述">1.3. git概述</h2>
<p>​	<strong>Git</strong>是一款免费、开源的<strong>分布式版本控制系统</strong>，用于敏捷高效地处理任何或小或大的项目。</p>
<p>它可以处理以下需求</p>
<ul>
<li>方便的和团队共享文件</li>
<li>对文件进行版本的控制</li>
</ul>
<p><a href="https://baike.baidu.com/item/GIT/12647237">Git百度百科</a></p>
<h2 id="14-git和svn对比">1.4. git和svn对比</h2>
<h3 id="141-svn">1.4.1. svn</h3>
<p>​	SVN是<strong>集中式版本控制系统</strong>，版本库是集中放在中央服务器的。</p>
<p>每次需要获取最新的文件或者保存自己当前的记录时，都必须要连接到服务器才可以。</p>
<p><strong>关键字</strong>：</p>
<ul>
<li>集中式</li>
<li>需要连接外网</li>
</ul>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g334qudodgj30bc080t92.jpg" alt="1525849453223"></p>
<h3 id="142-git">1.4.2. git</h3>
<p>​	Git是<strong>分布式版本控制系统</strong>，它没有中央服务器，每个人的电脑就是一个完整的版本库。</p>
<p>当需要和别人分享文件时时，再联网即可。</p>
<p><strong>关键字</strong>:</p>
<ul>
<li>分布式</li>
</ul>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1g334qwvrwbj30fj0agq3i.jpg" alt="1525849575573"></p>
<h2 id="15-git-安装">1.5. git 安装</h2>
<p>​	Git可以在Linux、Unix、Mac和Windows这几大平台上正常运行使用。</p>
<p><a href="https://git-scm.com/download">下载地址</a></p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g334r0hf5xj30in05uwfm.jpg" alt="1525849875115"></p>
<p>​	安装成功后（windows下），在系统的任意目录下 点击 鼠标右键   出现以下菜单，代表安装成功。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1g334r48cmaj30630bkmxo.jpg" alt="1525849962486"></p>
<h2 id="16-初次运行-git-前的配置">1.6. 初次运行 Git 前的配置</h2>
<p>​	在团队的项目开发中，当我们对进行文件的修改时，都应该告诉服务器 是<strong>谁</strong>做的修改。所以 需要 配置个人信息。</p>
<h3 id="161-全局配置">1.6.1. 全局配置</h3>
<p>​	打开 git 命令行工具</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1g334rl6dacj306506kwes.jpg" alt="1525850607969"></p>
<p>​	输入</p>
<pre><code class="language-bash"># 配置 用户名
git config --global  user.name  xxx 

# 配置 邮箱
git config --global  user.email  xxx 

# 查看用户名
git config   user.name  
</code></pre>
<h2 id="17-git-基础">1.7. git 基础</h2>
<p>​	如 我们想使用 git 对 该目录进行版本控制</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g334rnfcm9j30dv05hdg1.jpg" alt="1525851471188"></p>
<h3 id="171-创建版本库">1.7.1. 创建版本库</h3>
<p>​	在 <code>我的第一个网站</code> 目录 内   输入 <code>git init</code>  初始化 仓库</p>
<pre><code class="language-bash">git init 
</code></pre>
<p>​	可以看到，在该目录下 多了一个 <strong>隐藏文件夹</strong>  <code>.git</code>   该文件夹便是实现存放版本记录的地方。<strong>不要手动修改！</strong></p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1g334rryhffj308x04f3yd.jpg" alt="1525851668248"></p>
<h3 id="172-添加到暂存区">1.7.2. 添加到暂存区</h3>
<p>​	现在我们的代码 和 git 仓库 还没有直接的联系  查看 git 仓库状态  输入 <code>git status</code></p>
<pre><code class="language-bash">git status
</code></pre>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1g334rv4g4tj30ny0adq3g.jpg" alt="1525852100376"></p>
<p>​	我们把添加跟踪的步骤，叫做 添加到 <strong>暂存区</strong></p>
<p>​	输入  <code>git add *</code> 对所有文件进行跟踪</p>
<pre><code class="language-bash">git add * 
</code></pre>
<p>​	此时，重新 查看 仓库状态</p>
<pre><code class="language-bash">git status 
</code></pre>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g334ry36vkj30it06swet.jpg" alt="1525852288499"></p>
<p>​	因此，我们可以 随时的  输入  <code>git status</code> 来查看当前仓库的状态，来获得 提示。</p>
<h3 id="173-提交本地仓库">1.7.3. 提交本地仓库</h3>
<p>​	暂存区的意思 只是暂时存储文件，当需要把对文件的操作 <strong>永久存储下来时</strong>，需要在把暂存区中的文件提交到到本地仓库。</p>
<p>​	输入以下命令进行提交，同时 还需要备注 信息 如 <code>初始化项目</code> 、 <code>新增了购物接口</code> 等。</p>
<pre><code class="language-bash">git commit -m &quot;初始化项目&quot;
</code></pre>
<p>​	重新输入 <code>git status</code> 查看git 仓库状态</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g334s7k45jj30iz031q33.jpg" alt="1525853095009"></p>
<h3 id="174-小结">1.7.4. 小结</h3>
<p>​	把刚才操作的流程，换成专业的术语。</p>
<ul>
<li>工作目录 ：刚才操作的文件夹   <code>我的第一个网站</code> 就称为 <strong>工作目录</strong></li>
<li>暂存区 ： 是用来存放 对文件进行了 跟踪，但是还没有 提交到 <strong>本地仓库</strong> 的地方</li>
<li>本地仓库： 最终实现 文件版本管理的地方。</li>
</ul>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1g334s9gecjj30ry041t8p.jpg" alt="1525853953043"></p>
<h2 id="18-修改文件">1.8. 修改文件</h2>
<p>​	在上个操作的基础上，我们对文件进行修改，然后让 git 记录这次修改的操作。</p>
<p>编辑 <code>index.html</code> 文件 输入</p>
<pre><code class="language-html">&lt;h1&gt;完成了登录页面的设计&lt;/h1&gt;
</code></pre>
<p>​	此 时 <code>index.html</code> 文件发生了修改  我们输入  <code>git status</code> 查看仓库状态</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g334sd2auoj30nx05k0t7.jpg" alt="1525854096520"></p>
<h3 id="181-添加到暂存区">1.8.1. 添加到暂存区</h3>
<p>​	以上的修改，可以理解为 完成了一个功能，此时，也需要将这些代码提交到 <strong>本地仓库</strong> 中进行记录管理。因此，先添加到 <strong>暂存区</strong> 再提交到 <strong>本地仓库</strong> 中即可。</p>
<p>​	将 修改的文件添加到 <strong>暂存区</strong>  输入</p>
<pre><code class="language-bash">git add *
</code></pre>
<p>​	查看git 仓库状态</p>
<pre><code>git status
</code></pre>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1g334se5319j30j204tjrn.jpg" alt="1525854150926"></p>
<h3 id="182-提交到本地仓库">1.8.2. 提交到本地仓库</h3>
<p>​	将暂存区中的文件提交的 本地仓库 实现 版本 记录</p>
<pre><code class="language-bash">git commit -m &quot;完成了登录功能&quot;
</code></pre>
<p>​	查看git 仓库状态</p>
<pre><code class="language-bash">git status
</code></pre>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g334sgynorj30j102ht8r.jpg" alt="1525854664486"></p>
<h2 id="19-删除文件">1.9. 删除文件</h2>
<p>​	在git 仓库中，有时候删除一些无效的文件。以删除     <code>css/index.css</code> 为例</p>
<p>​	手动将该 文件夹整个删除     删除成功 如下</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1g334sifve5j304s02qgle.jpg" alt="1525855125140"></p>
<p>​	查看仓库状态</p>
<pre><code class="language-bash">git status 
</code></pre>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g334sjqk76j30m405qt96.jpg" alt="1525855216992"></p>
<h3 id="191-添加到暂存区">1.9.1. 添加到暂存区</h3>
<p>​	删除了 文件，也可以了解为是对项目 进行了一次升级改造，因此同样需要把该 操作 提交到 <strong>本地仓库</strong></p>
<p>​	输入    <code>git add ./</code>   请注意 当添加删除操作时  使用 <code>git add *</code> 是无效的。（git add * 不会缓存删除操作）</p>
<pre><code class="language-bash">git add ./
</code></pre>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g334sllt17j30il04p0sz.jpg" alt="1525855744440"></p>
<h3 id="192-提交到本地仓库">1.9.2. 提交到本地仓库</h3>
<p>​	把该 删除操作 提交到 <strong>本地仓库</strong> 实现 版本记录</p>
<pre><code class="language-bash">git commit -m &quot;删除了css文件夹&quot;
</code></pre>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g334sp9scrj30iu03ft8x.jpg" alt="1525855898836"></p>
<p>​	查本地仓库的状态</p>
<pre><code class="language-bash">git status
</code></pre>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g334snbmzmj30ij02st8r.jpg" alt="1525855957999"></p>
<h2 id="110-忽略文件">1.10. 忽略文件</h2>
<p>​	有时候，在工作目录下的某些文件，是属于私人的或者是项目运行所产生的临时文件，并不需要添加到 版本控制中。 如 新增一个文件 <code>私人密码</code></p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g334ss1qjgj30ac0530sp.jpg" alt="1525858765405"></p>
<p>​	查看git仓库状态</p>
<pre><code class="language-bash">git status
</code></pre>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g334su1xf0j30oe0590t3.jpg" alt="1525859125972"></p>
<p>​	此时 我们可以使用 git 规定的一个文件   <code>.gitignore</code>   在里面指定需要过滤的文件</p>
<h3 id="1101-创建-忽略文件清单">1.10.1. 创建 忽略文件清单</h3>
<p>​	直接在windows 右键 新建文件  <code>gitignore</code>  会创建失败。</p>
<p>​	使用命令行的方式创建</p>
<pre><code class="language-bash">touch .gitignore
</code></pre>
<p>​	编辑   <code>.gitignore</code> 文件  直接写入 要忽略的文件名即可</p>
<pre><code class="language-bash"># 忽略该文件
私人密码.txt
</code></pre>
<p>​	查看git仓库状态</p>
<pre><code class="language-bash">git status
</code></pre>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1g334t1z7rxj30ma0e4acz.jpg" alt="1525859577480"></p>
<p>大部分情况下，我们也需要将 <code>.gitignore</code> 文件一起提交到本地仓库中实行版本控制</p>
<p>​	添加到暂存区   该文件 使用 <code>git add *</code> 无效 需要手动指定文件名</p>
<pre><code class="language-bash">git add .gitignore
</code></pre>
<p>​	提交到本地仓库</p>
<pre><code class="language-bash">git commit -m &quot;添加了忽略文件列表&quot;
</code></pre>
<h3 id="1102-忽略文件语法">1.10.2. 忽略文件语法</h3>
<ul>
<li>
<p>语法大部分和正则类似</p>
</li>
<li>
<p>空行或是以#开头的行即注释行将被忽略；</p>
<pre><code class="language-bash"># 这种是注释
</code></pre>
</li>
<li>
<p>以斜杠 “/” 结尾表示目录；</p>
<pre><code class="language-bash">css/
</code></pre>
</li>
<li>
<p>以星号 “*” 通配多个字符；</p>
<pre><code class="language-bash">*.js
</code></pre>
</li>
<li>
<p>以问号 “?” 通配单个字符</p>
</li>
<li>
<p>以方括号 “[]” 包含单个字符的匹配列表；</p>
</li>
<li>
<p>以叹号 “!” 表示不忽略(跟踪)匹配到的文件或目录；</p>
</li>
<li>
<p>可以在前面添加斜杠 “/” 来避免递归</p>
<pre><code class="language-bash"># 忽略根目录下的 css 文件夹
/css
# 忽略所有的css文件夹
css/
</code></pre>
</li>
</ul>
<h2 id="111-推送到远程仓库">1.11. 推送到远程仓库</h2>
<p>因为在团队开发中，我们的项目文件是需要和组员进行分享的，所以实现这个功能，就必须得借助远程仓库。</p>
<p>远程仓库只是 本地仓库的一个备份。</p>
<p>目前 用得比较多的有 <a href="https://github.com/">github</a> 和 <a href="https://gitee.com/">码云</a></p>
<ul>
<li>github做为最著名的git仓库托管商,是行业内的绝对权威.它给无数的开发者提供了共同学习发展的平台.</li>
<li>码云是github的国产版,对国人做了针对性的优化,在国内也是使用者众多</li>
</ul>
<p>我们主要演示 <strong>github</strong>的使用，码云 <strong>强烈建议</strong> 课下 自己学习使用。</p>
<h3 id="1111-注册-github">1.11.1. 注册 github</h3>
<p>先注册一个 github帐号</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g334tbec8sj30ig04974d.jpg" alt="1525915907144"></p>
<h3 id="1112-新建远程仓库">1.11.2. 新建远程仓库</h3>
<p><strong>1 一个github帐号可以建立多个远程仓库，一般 一个项目使用一个仓库。</strong></p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1g334tcnhg1j30ii06175q.jpg" alt="1525916009292"></p>
<p><strong>2 填写仓库信息</strong></p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1g334tgillij30um0gwabr.jpg" alt="1525916256235"></p>
<p><strong>3 创建成功</strong></p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1g334tht8utj30s80jlq56.jpg" alt="1525916479663"></p>
<h3 id="1113-推送到远程仓库">1.11.3. 推送到远程仓库</h3>
<p>​	远程仓库建立完毕之后，我们可以 将 之前的 本地仓库 <code>我的第一个网站</code> 推送到上面新建的 <code>test</code> 远程仓库上</p>
<p>​	先记录远程仓库的地址</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g334tnzqtxj30r003cdg7.jpg" alt="1525916715340"></p>
<pre><code class="language-bash">https://github.com/itcastWsy/test.git
</code></pre>
<p>​	把远程仓库 记录在一个 变量   <code>origin</code> 上  该名字可自定义</p>
<pre><code class="language-bash">git remote add origin https://github.com/itcastWsy/test.git
</code></pre>
<p>​	在推送到远程仓库之前，先确保 本地仓库已经 执行过 commit 了，这样 才会保证 本地仓库 和远程仓库一致。</p>
<p>​	查看本地仓库状态</p>
<pre><code class="language-bash">git status
</code></pre>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g334tpwcotj30ic0440sx.jpg" alt="1525917201540"></p>
<p>​	开始推送</p>
<pre><code class="language-bash">git push -u origin master
</code></pre>
<p>​	提示输入用户名 ，直接输入即可 如 <code>itcastWsy</code>  然后按下回车</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1g334tsiwnrj30ds039dft.jpg" alt="1525917393459"></p>
<p>​	提示输入密码</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g334tvooy0j30ck091q32.jpg" alt="1525917512404"></p>
<p>没有看到报错，就是 推送成功</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1g334twfeiyj30e104aaa6.jpg" alt="1525917563467"></p>
<p>同时，刷新一下 <strong>github</strong> 页面  看到远程仓库上 显示出 仓库的信息了。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1g334tzaot1j30y40eagna.jpg" alt="1525917685788"></p>
<h2 id="112-从远程仓库克隆">1.12. 从远程仓库克隆</h2>
<p>​	假设 <strong>建立本地仓库</strong>、 <strong>推送到远程仓库</strong> 的工作都是项目经理完成了。此时，你做为一个新加入项目的 <strong>程序猿</strong>，要做的事就是从远程仓库上 <strong>克隆</strong> 代码。</p>
<p>​	问项目经理拿 远程仓库的地址</p>
<pre><code class="language-bash">https://github.com/itcastWsy/test.git
</code></pre>
<p>​	在你的电脑上任意目录下（如 桌面） 开始克隆</p>
<p>​	在桌面上 打开 <strong>git bash 命令行工具</strong>  输入</p>
<pre><code class="language-bash">git clone https://github.com/itcastWsy/test.git
</code></pre>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1g334u7pztpj30mz0jyq6o.jpg" alt="1525918417230"></p>
<h2 id="113-从远程仓库获取更新">1.13. 从远程仓库获取更新</h2>
<p>​	此时，项目经理的代码  和 你的代码 是一模一样的。现在 项目经理 新增了一个文件   <code>home.html</code>,并把它提交到远程仓库上。</p>
<ul>
<li>
<p>新建 home.html 文件</p>
<pre><code class="language-bash">touch home.html
</code></pre>
</li>
<li>
<p>添加到暂存区</p>
<pre><code class="language-bash">git add *
</code></pre>
</li>
<li>
<p>提交到本地仓库</p>
<pre><code class="language-bash">git commit -m &quot;新增了home.html&quot;
</code></pre>
</li>
<li>
<p>推送到远程仓库</p>
<pre><code>git push 
</code></pre>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1g334uc8vbvj30q60daac1.jpg" alt="1525919345574"></p>
</li>
</ul>
<p>​	查看远程仓库</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1g334uhi3c1j30po0a0mxz.jpg" alt="1525919393855"></p>
<p>​	那么现在 做为程序员的你 需要把代码 进行更新</p>
<p>​	回到   <code>test</code> 文件夹内，打开 <strong>git bash</strong> 命令行</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g334ukeq21j30cw0c3js2.jpg" alt="1525919520069"></p>
<p>输入以下命令 进行更新</p>
<pre><code>git pull
</code></pre>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g334uq5arkj30ud0aadgy.jpg" alt="1525919829352"></p>
<h2 id="114-git-clone-和-git-pull-的区别">1.14. git clone 和 git pull 的区别</h2>
<ul>
<li>git clone 是克隆，只需要执行一次</li>
<li>git pull 是 更新，后期反复使用</li>
</ul>
<h2 id="115-还原文件到上次commit状态">1.15. 还原文件到上次commit状态</h2>
<p>​	假设做为程序员的你，刚刚把代码更新下来，便上厕所去了，这个时候你的熊孩子趁你不在，对着你的键盘就是一顿 啪啪啪 ，把你 <strong>home.html</strong>  文件敲得面目全非。</p>
<p>​	你现在想要做的事，就是把 <strong>home.html</strong> 还原到 拉取下来的状态。</p>
<p>​	原来的home.html 内容是空的。（你是不知道里面的内容的）</p>
<p>​	熊孩子 把 <strong>home.html</strong> 改成了</p>
<pre><code class="language-html">&lt;h1&gt;钱多话少死的早&lt;/h1&gt;
</code></pre>
<p>​	开始还原，在   <code>test</code> 目录下，输入命令行</p>
<pre><code class="language-bash">git checkout  home.html
</code></pre>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1g334uugticj30wi09pq3e.jpg" alt="1525922259127"></p>
<p>​	如果想要还原多个文件，可以</p>
<ul>
<li>
<p>还原文件夹 css 文件夹</p>
<pre><code>git checkout css
</code></pre>
</li>
<li>
<p>还原当前目录的所有文件</p>
<pre><code>git checkout ./ 
</code></pre>
</li>
</ul>
<h2 id="116-查看版本历史">1.16. 查看版本历史</h2>
<p>​	做为 新加入项目的你，想要了解 这个项目，到底做过了哪些版本，想要看到之前每一次提交时的备注信息</p>
<p>此时，你的 <code>test</code> 文件夹内  输入 命令进行查看</p>
<pre><code class="language-bash">git log
</code></pre>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g334v18gzcj30n60evta3.jpg" alt="1525920485139"></p>
<h2 id="117-还原到某一个版本">1.17. 还原到某一个版本</h2>
<p>​	做为 新加入项目的你，来获取了最新的代码之后，发现项目太大了，你不好去学习和了解 其中的某一个模块的功能和代码。如</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1g334v4d2wyj30fx0fjt9y.jpg" alt="1525922607367"></p>
<p>此时，可以把整个项目 还原到 <strong>完成了登录功能的状态</strong></p>
<p>​	记录 该版本的   <code>commit</code> 字段</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1g334v840q6j30fm036jrg.jpg" alt="1525922690195"></p>
<p>​</p>
<pre><code>3db7762c593251f1a78e518fdd3ed6d6cad626bc
</code></pre>
<pre><code>开始还原   （commit 字段 最少 写 6位）
</code></pre>
<pre><code class="language-bash">git reset -–hard 3db7762c593251f1a78e518fdd3ed6d6cad626bc
</code></pre>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g334vajaxvj30mo090wew.jpg" alt="1525922921419"></p>
<p>​	如果，在次状态下又想回到 最新的版本  <strong>新增了home.html</strong> 呢  查看提交信息</p>
<pre><code>git log
</code></pre>
<p>​	发现   <code>完成登录功能</code> 之后的日志信息 丢失了。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g334vdwicdj30qz0fx0ui.jpg" alt="1525923215275"></p>
<p>​	此时，输入</p>
<pre><code class="language-bash">git reflog 
</code></pre>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g334vhz1sbj30jo098gma.jpg" alt="1525923554914"></p>
<p>​	还原到最新的版本</p>
<pre><code>git reset --hard 5038cc9
</code></pre>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g334vn21rij30o60i1760.jpg" alt="1525923659935"></p>
<h3 id="1171-小结">1.17.1. 小结</h3>
<ul>
<li><code>git checkout xxx</code> 只能还原文件到上一个版本</li>
<li><code>git reset --hard 'commit的id'</code> 可以还原到任意版本</li>
<li><code>git reflog</code> 可以查看丢失了的版本的日志信息</li>
</ul>
<h2 id="118-配置ssh">1.18. 配置ssh</h2>
<p>​	我们把文件从本地仓库推送到远程仓库的方式有两种</p>
<ul>
<li>HTTPS 每次都要手动输入 用户名和密码</li>
<li>SSH 配置证书后，不用手动输入用户名和密码</li>
</ul>
<h3 id="1181-配置证书">1.18.1. 配置证书</h3>
<p>在git bash 命令行中输入</p>
<pre><code class="language-bash">ssh-keygen -t rsa -C &quot;邮箱地址&quot;
</code></pre>
<p>然后一直按回车。直到出现如下界面 代表本地 证书生成成功</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g334vq02isj30ar0bwglx.jpg" alt="1525933559552"></p>
<p>输入命令 打印密钥</p>
<pre><code>cat ~/.ssh/id_rsa.pub
</code></pre>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g334vtpqptj30h1062t8z.jpg" alt="1525933696717"></p>
<p>按以下步骤进行粘贴即可</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1g334vy9i36j30rt0jhta8.jpg" alt="1525934009733"></p>
<p>输入</p>
<pre><code class="language-bash">ssh -T git@github.com
</code></pre>
<p>出现以下界面代表成功。如果失败，建议多尝试几次。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g334w3ckgij30ll0253yh.jpg" alt="1525934471737"></p>
<h3 id="1182-将提交方式-https-改为-ssh">1.18.2. 将提交方式 HTTPS   改为 SSH</h3>
<p>复制 <strong>SSH</strong> 地址</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1g334w5th3xj30rp0e7dgy.jpg" alt="1525934827313"></p>
<p><img src="medias/1525934868632.png" alt="1525934868632"></p>
<pre><code>git@github.com:itcastWsy/test.git
</code></pre>
<p>修改 <strong>origin</strong> 地址</p>
<p>因为之前已经将 地址 存入 <strong>origin</strong>  变量了 。查看 origin</p>
<pre><code class="language-bash">git remote -v
</code></pre>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1g334wh7hpoj30g7020jrd.jpg" alt="1525934970736"></p>
<p>此时，将origin的地址 改为 <strong>ssh</strong> 地址即可</p>
<pre><code class="language-bash">git remote set-url origin git@github.com:itcastWsy/test.git
</code></pre>
<p>重新查看 <code>git remote -v</code>   发现修改成功</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g334wiedmuj30f3029weg.jpg" alt="1525935054456"></p>
<p>按照以上步骤执行完毕之后，再次推送到远程仓库时，就不用再输入用户名和密码了。</p>
<p>测试</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g334wmacwhj30o10hmq5a.jpg" alt="1525935332160"></p>
<h2 id="119-分支">1.19. 分支</h2>
<p>​	其实我们在使用git的时候，一直在 git的主分支<code>master</code>也是默认分支下进行工作的。也可以手动开启另外的分支进行开发。</p>
<p>​	开启新的的分支时可以理解为复制了一个相同的副本.内容完全一样</p>
<p>​	分支的作用是提供了一种方便、高效的管理项目的手段。</p>
<p>​	学习分支,我们需要从需求入手</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1g334wnk0ruj30p90cft92.jpg" alt="1528519197378"></p>
<p>​	流程解释:</p>
<ol>
<li>
<p>网站发布了第一个版本</p>
</li>
<li>
<p>此时,需要研发新功能1.1版本</p>
</li>
<li>
<p>开启新的分支<code>dev</code>进行研发</p>
<ol>
<li>研发成功，将分支<code>dev</code>合并到主分支<code>master</code>上,发布新版本1.1</li>
<li>研发失败，直接删除分支<code>dev</code>即可</li>
</ol>
<p>经过以上流程,我们可以在毫无风险的情况下开发新功能,不会影响到已经发布了的网站。</p>
</li>
</ol>
<h3 id="1191-网站发布0版本">1.19.1. 网站发布0版本</h3>
<p>在目下下,新建文件夹 <code>web</code>，并在里新建一个空的文件<code>index.html</code> 提交到本地仓库</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g334wq25sjj30t8099tae.jpg" alt="1528519852700"></p>
<h3 id="1192-开启新分支">1.19.2. 开启新分支</h3>
<p>​	在完成1.0版本发布后（commit之后），开启新分支 dev（dev为分支名）</p>
<pre><code class="language-bash">git branch dev
</code></pre>
<p>​	查看当前仓库下的分支</p>
<pre><code class="language-bash">git branch 
</code></pre>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g334wtsntfj30ma04djrk.jpg" alt="1528520046133"></p>
<h3 id="1193-切换分支">1.19.3. 切换分支</h3>
<p>​	此时，需要手动切换分支到dev上，</p>
<pre><code class="language-bash">git checkout dev
</code></pre>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1g334ww965mj30ph059weq.jpg" alt="1528520161732"></p>
<h3 id="1194-在分支dev上开发功能">1.19.4. 在分支dev上开发功能</h3>
<p>​	此时，我们可以在分支dev上，放心的进行功能开发。编辑文件 <code>index.html</code> 添加一下内容</p>
<pre><code>开发新功能1.0
</code></pre>
<p>​	提交到仓库</p>
<pre><code class="language-bash">git add .
git commit -m &quot;dev下开发新功能1.1&quot;
</code></pre>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g334wygzt7j30jm0ah74t.jpg" alt="1528520834607"></p>
<h3 id="1195-合并分支">1.19.5. 合并分支</h3>
<p>​	新功能开发完毕，需要将分支<code>dev</code>的代码合并到主分支<code>master</code>上</p>
<ol>
<li>
<p>切换回主分支 <code>master</code></p>
<pre><code class="language-bash">git checkout master
</code></pre>
</li>
<li>
<p>合并分支 <code>dev</code></p>
<pre><code class="language-bash">git merge dev
</code></pre>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1g334x16ksjj30py0f2gmh.jpg" alt="1528521188063"></p>
</li>
</ol>
<h3 id="1196-删除分支">1.19.6. 删除分支</h3>
<p>既然 分支dev的功能已经完成，我们可以将其删除。</p>
<pre><code class="language-bash">git branch -d dev
</code></pre>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g334x50mngj30g60400sr.jpg" alt="1525947107745"></p>
<p>查看git仓库下的分支，发现 分支dev 确实没有了</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g334x6gld9j30fr07r0sy.jpg" alt="1525947206980"></p>
<h2 id="120-冲突">1.20. 冲突</h2>
<p>​	冲突是指当两个同名的文件进行合并时，会产生的一种场景。</p>
<h3 id="1201-冲突描述">1.20.1. 冲突描述</h3>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1g334x8nbfij30hc09eq3p.jpg" alt="1526001349246"></p>
<p>​	当把       <code>我的代码</code>内的两个文件 拷贝到 <code>他的代码</code> 文件夹内时</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g334xam0bsj30gy0d10tj.jpg" alt="1526001545996"></p>
<p>​	可以看到此时，冲突就产生了 因为电脑并不知道 你想要保留哪一份   <code>index.html</code> 文件（<strong>home.html</strong>没有冲突） ，于是，弹出对话框，让用户进行选择。</p>
<p>​	所以冲突具有以下特点</p>
<ul>
<li>在文件进行合并时容易产生</li>
<li>冲突的解决方法，只能是用户决定</li>
</ul>
<h2 id="121-分支合并时的冲突">1.21. 分支合并时的冲突</h2>
<p>​	刚才的演示，是人为手动操作导致的。当我们使用分支，进行合并的时候，也会出现冲突，只不过这次冲突的 <strong>提示框</strong> 和 <strong>解决方法</strong> 都是通过 <strong>命令行</strong>来体现的。</p>
<h3 id="1211-初始化仓库">1.21.1. 初始化仓库</h3>
<ol>
<li>新建一个文件夹 <code>冲突的演示</code></li>
<li>初始化 git 仓库 <code>git init</code></li>
<li>新建文件 <code>index.html</code></li>
<li>添加到暂存区</li>
<li>提交到本地仓库</li>
</ol>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g334xh5dw0j30op0a93zu.jpg" alt="1526002222651"></p>
<p>​</p>
<h3 id="1212-开启-分支-dev">1.21.2. 开启 分支 dev</h3>
<p>​	初始化完仓库之后，开启分支dev，此时 分支dev 的内容和主分支master 是一模一样的</p>
<pre><code class="language-bash">git branch dev
</code></pre>
<p>​	<img src="https://ws3.sinaimg.cn/large/006tNc79gy1g334xpyhnyj30ht01t3yf.jpg" alt="1526002370112"></p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g334xlvi9zj30f406xgll.jpg" alt="1526002472933"></p>
<p>​	在分支master下，</p>
<ol>
<li>编辑 <strong>index.html</strong>  输入  <code>主分支master下的编辑</code></li>
<li>添加到暂存区 <code>git add *</code></li>
<li>提交到本地仓库 <code>git commit -m &quot;master下修改了index.html&quot;</code></li>
</ol>
<p><img src="medias/1526002990206.png" alt="1526002990206"></p>
<p>​	切换到 分支 dev下</p>
<ol>
<li>
<p>切换分支 <code>git checkout dev</code></p>
<p><img src="medias/1526003304232.png" alt="1526003304232"></p>
</li>
<li>
<p>编辑 <strong>index.html</strong>  输入  <code>分支dev下的编辑</code></p>
</li>
<li>
<p>添加到暂存区 <code>git add *</code></p>
</li>
<li>
<p>提交到本地仓库 <code>git commit -m &quot;dev下修改了index.html&quot;</code></p>
</li>
</ol>
<p><img src="medias/1526003463186.png" alt="1526003463186"></p>
<p>完成了以上操作之后，主分支<strong>master</strong>和 分支<strong>dev</strong> 下的index.html 分别是</p>
<p><img src="medias/1526003571578.png" alt="1526003571578"></p>
<h3 id="1213-合并冲突分支以及解决">1.21.3. 合并冲突分支以及解决</h3>
<p>此时准备分支合并，</p>
<ol>
<li>
<p>切换回主分支 <code>git checkout master</code></p>
</li>
<li>
<p>执行合并 <code>git merge dev</code> 弹出提示 <strong>文件合并产生冲突了</strong></p>
<p><img src="medias/1526003800813.png" alt="1526003800813"></p>
</li>
<li>
<p>此时，手动解决冲突，打开 <code>index.html</code> 文件 发现</p>
<p><img src="medias/1526004039990.png" alt="1526004039990"></p>
</li>
<li>
<p>添加到暂存区</p>
</li>
<li>
<p>提交到本地仓库</p>
<p><img src="medias/1526004176375.png" alt="1526004176375"></p>
</li>
</ol>
<p>至此，冲突的产生以及解决，演示完毕。 强烈建议  自行多练习该步骤，了解每一步的含义。</p>
<h2 id="122-常用git命令">1.22. 常用git命令</h2>
<table>
<thead>
<tr>
<th>注解</th>
<th>命令</th>
</tr>
</thead>
<tbody>
<tr>
<td>git reset HEAD XXX</td>
<td>从暂存区移出</td>
</tr>
<tr>
<td>git diff</td>
<td>查看编辑过的文件和 版本库的区别</td>
</tr>
<tr>
<td>git config user.name xxx</td>
<td>配置当前仓库的用户名</td>
</tr>
<tr>
<td>git config user.email xxx</td>
<td>配置当前仓库的邮箱</td>
</tr>
<tr>
<td>git init</td>
<td>初始化 git 仓库</td>
</tr>
<tr>
<td>git add xxx</td>
<td>添加到暂存区</td>
</tr>
<tr>
<td>git commit -m &quot;备注&quot;</td>
<td>提交到本地仓库</td>
</tr>
<tr>
<td>git commit -m &quot;备注&quot; -a</td>
<td>git add  和 git commit 的综合</td>
</tr>
<tr>
<td>git remote -v</td>
<td>查看远程仓库地址</td>
</tr>
<tr>
<td>git remote add 远程仓库名  远程仓库地址</td>
<td>添加远程仓库地址</td>
</tr>
<tr>
<td>git remote rm 远程仓库名</td>
<td>删除远程仓库</td>
</tr>
<tr>
<td>git remote set-url 远程仓库名 远程仓库地址</td>
<td>修改远程仓库地址</td>
</tr>
<tr>
<td>git push 远程仓库地址 master</td>
<td>提交到远程仓库</td>
</tr>
<tr>
<td>git push 远程仓库地址 master -u</td>
<td>提交到远程仓库 (以后 git push 即可)</td>
</tr>
<tr>
<td>git clone 远程仓库地址</td>
<td>克隆仓库</td>
</tr>
<tr>
<td>git pull</td>
<td>拉取更新</td>
</tr>
<tr>
<td>ssh-keygen -t rsa -C &quot;邮箱地址&quot;</td>
<td>生成 ssh证书</td>
</tr>
<tr>
<td>cat ~/.ssh/id_rsa.pub</td>
<td>查看ssh证书</td>
</tr>
<tr>
<td>git reset --hard &quot;commit Id&quot;</td>
<td>还原到某版本</td>
</tr>
<tr>
<td>git reset --hared HEAD^</td>
<td>还原到上一个版本</td>
</tr>
<tr>
<td>git log</td>
<td>查看版本历史</td>
</tr>
<tr>
<td>git reflog</td>
<td>查看更强大的版本历史</td>
</tr>
<tr>
<td>git checkout 文件名</td>
<td>还原文件到上一个版本</td>
</tr>
<tr>
<td>git branch 分支名</td>
<td>创建分支</td>
</tr>
<tr>
<td>git checkout 分支名</td>
<td>切换到分支</td>
</tr>
<tr>
<td>git merge 分支名</td>
<td>合并分支</td>
</tr>
<tr>
<td>git branch</td>
<td>查看分支</td>
</tr>
<tr>
<td>git branch -d 分支名</td>
<td>删除分支</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="123-扩展阅读">1.23. 扩展阅读</h2>
<p><a href="https://progit.bootcss.com/">Pro Git</a></p>
<p><a href="https://backlog.com/git-tutorial/cn">猴子都能看懂的git</a></p>
<p><a href="https://www.cnblogs.com/savorboard/p/bash-guide.html">十分钟掌握bash 命令</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue-Cli 3 记录一下遇到的坑]]></title>
        <id>/Users/hidarioosakai/OneDrive/Documents/Root-Blog/output/post/vue-cli-3-ji-lu-yi-xia-yu-dao-de-keng/index.html</id>
        <link href="/Users/hidarioosakai/OneDrive/Documents/Root-Blog/output/post/vue-cli-3-ji-lu-yi-xia-yu-dao-de-keng/index.html">
        </link>
        <updated>2019-05-16T06:04:15.000Z</updated>
        <summary type="html"><![CDATA[<p>记录下在Vue-Cli 3 中遇到的坑</p>
]]></summary>
        <content type="html"><![CDATA[<p>记录下在Vue-Cli 3 中遇到的坑</p>
<!-- more -->
<h3 id="1在mac-os-系统问题">1.在Mac os 系统问题</h3>
<h4 id="11-error-eacces-permission-denied-access-usrlocallibnode_modules">1.1-Error: EACCES: permission denied, access '/usr/local/lib/node_modules</h4>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1g334mn8m0zj317m0l27af.jpg" alt="image-20190121103347667"></p>
<p><strong>原因</strong>：执行命令行命令时没有获得管理员权限</p>
<p><strong>解决方案</strong>：在命令行前面添加sudo获取管理员权限，输入管理员密码就行</p>
<p><strong>例如</strong>：</p>
<ul>
<li>原来的是:  npm install -g vue-cli</li>
<li>应该该为：sudo npm install -g vue-cli   再输入密码就行</li>
</ul>
<h3 id="2eslint-一系列问题">2.ESlint 一系列问题</h3>
<h4 id="21-consolelog-报错">2.1-console.log 报错</h4>
<p><strong>解决方式：</strong></p>
<ul>
<li>在ESlint 的规则中加上以下这个就不会报错了</li>
</ul>
<pre><code class="language-json">&quot;rules&quot;: {
    &quot;no-console&quot;: &quot;off&quot;,
}
</code></pre>
<h4 id="22-debugger-报错">2.2-debugger 报错</h4>
<p><strong>解决方式：</strong></p>
<ul>
<li>
<p>在Eslint 规则中加上一下这个就不会报错了</p>
<pre><code class="language-json">&quot;rules&quot;: {
   &quot;no-debugger&quot;: &quot;off&quot;
}
</code></pre>
</li>
</ul>
<h3 id="3项目打包问题">3.项目打包问题</h3>
<h4 id="31-路径报错">3.1-路径报错</h4>
<p><strong>在vue.config.js 中重写打包后的基础路径为当前目录</strong></p>
<pre><code class="language-js">module.exports = {
    //...
  	//设置基础路径
  baseUrl:&quot;./&quot;
		//...
}
</code></pre>
]]></content>
    </entry>
</feed>